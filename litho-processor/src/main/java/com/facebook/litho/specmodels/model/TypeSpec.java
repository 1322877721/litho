/*
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
package com.facebook.litho.specmodels.model;

import com.facebook.litho.specmodels.internal.ImmutableList;
import com.squareup.javapoet.TypeName;

/**
 * This class represents a partial representation of the {@link javax.lang.model.type.TypeMirror}
 * class structure generated by the Processor.
 */
public class TypeSpec {

  private final TypeName mTypeName;

  public TypeSpec(TypeName typeName) {
    mTypeName = typeName;
  }

  public TypeName getTypeName() {
    return mTypeName;
  }

  /**
   * The comparison will be performed only if the TypeSpec is a DeclaredTypeSpec. A type is
   * considered subType of itself.
   */
  public boolean isSubType(TypeName type) {
    return false;
  }

  @Override
  public boolean equals(Object o) {
    return mTypeName.equals(o);
  }

  @Override
  public int hashCode() {
    return mTypeName.hashCode();
  }

  public static class DeclaredTypeSpec extends TypeSpec {
    private final String mQualifiedName;
    private final TypeSpec mSuperclass;
    private final ImmutableList<TypeSpec> mTypeArguments;

    public DeclaredTypeSpec(
        TypeName typeName,
        String qualifiedName,
        TypeSpec superclass,
        ImmutableList<TypeSpec> typeArguments) {
      super(typeName);
      mQualifiedName = qualifiedName;
      mSuperclass = superclass;
      mTypeArguments = typeArguments;
    }

    @Override
    public boolean isSubType(TypeName type) {
      return type.toString().equals(mQualifiedName)
          || (mSuperclass != null && mSuperclass.isSubType(type));
    }

    public ImmutableList<TypeSpec> getTypeArguments() {
      return mTypeArguments;
    }
  }
}
