// Android tasks for Javadoc and sources.jar generation

afterEvaluate { project ->
    if (POM_PACKAGING == 'aar') {
        task androidJavadoc(type: Javadoc, dependsOn: assembleDebug) << {
                source += files(android.sourceSets.main.java.srcDirs)
                failOnError true
                // This task will try to compile *everything* it finds in the above directory and
                // will choke on text files it doesn't understand.
                exclude '**/BUCK'
                exclude '**/*.md'

                classpath += files(android.bootClasspath)
                classpath += files(android.libraryVariants.collect { variant ->
                    variant.javaCompile.classpath.files
                })
                // This is generated by `assembleDebug` and holds the JARs generated by the APT.
                classpath += fileTree(dir: "$buildDir/intermediates/bundles/debug/", include: '**/*.jar')
        }

        task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
            classifier = 'javadoc'
            from androidJavadoc.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        android.libraryVariants.all { variant ->
            def name = variant.name.capitalize()
            task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
                from variant.javaCompile.destinationDir
            }
        }

        artifacts.add('archives', androidJavadocJar)
        artifacts.add('archives', androidSourcesJar)
    }

    if (POM_PACKAGING == 'jar') {
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts.add('archives', javadocJar)
        artifacts.add('archives', sourcesJar)
    }
}
