apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion

        javaCompileOptions {
            annotationProcessorOptions {
                // We transitively depend on auto-value which we don't want to
                // use as annotation processor at this time, so we can safely
                // disable this warning.
                includeCompileClasspath false
            }
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs '-Dcom.facebook.litho.is_oss=true'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':litho-core')
    testCompileOnly project(':litho-annotations')
    testImplementation project(':litho-testing')
    testImplementation project(':litho-widget')
    testImplementation project(':litho-processor')

    // Testing
    testCompileOnly deps.jsr305
    testImplementation deps.assertjCore
    testImplementation deps.compileTesting
    testImplementation deps.junit
    testImplementation deps.mockitoCore
    testImplementation deps.javapoet
    testImplementation deps.robolectric
    testImplementation deps.soloader
    testImplementation deps.supportAppCompat
    testImplementation deps.supportCoreUi
    testImplementation deps.supportRecyclerView
    testImplementation deps.powermockReflect
    testImplementation deps.khronos
    testImplementation files(getRuntimeJar())
    testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

/*
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

// Source - https://github.com/nenick/AndroidStudioAndRobolectric/blob/master/app/build.workaround-missing-resource.gradle
// Workaround for missing test resources when running unit tests within android studio.
// This copies the test resources next to the test classes for each variant.
// Tracked at https://github.com/nenick/AndroidStudioAndRobolectric/issues/7
// Original solution comes from https://code.google.com/p/android/issues/detail?id=136013#c10
// See also https://code.google.com/p/android/issues/detail?id=64887

gradle.projectsEvaluated {
  // Base path which is recognized by android studio.
  def testClassesPath = "${buildDir}/intermediates/classes/test/"
  // Copy must be done for each variant.
  def variants = android.libraryVariants.collect()

  variants.each { variant ->
    def variationName = variant.name.capitalize()
    def variationPath = variant.buildType.name

    // Specific copy task for each variant
    def copyTestResourcesTask = project.tasks.create("copyTest${variationName}Resources", Copy)
    copyTestResourcesTask.from("${projectDir}/src/test/resources")
    copyTestResourcesTask.into("${testClassesPath}/${variationPath}")
    copyTestResourcesTask.execute()
  }
}
